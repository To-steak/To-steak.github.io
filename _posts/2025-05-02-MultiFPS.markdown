---
layout: single
title:  "Photon을 이용한 멀티 FPS"
date:   2025-05-29 22:48:12 +0900
categories: [Unity, Photon Engine]
---
FPS 게임을 포트폴리오에 담을 때는 ‘읽는 사람(채용 담당자, 동료 개발자, 투자자 등)’이 한눈에 프로젝트의 전반적인 흐름과 기술적 깊이를 파악할 수 있도록, 논리적이고 단계적인 순서로 구성하는 것이 중요합니다. 아래에 제안하는 순서와 각 항목별 필수 내용을 참고하여 작성해 보세요.

---

1. **프로젝트 개요 (Overview)**

   * **타이틀 & 간략 소개**

     * 게임 제목(또는 코드명)
     * 개발 기간(예: 2024.01 \~ 2024.06)
     * 팀 규모(혼자서 작업했는지, 몇 명으로 구성된 팀인지)
     * 기획 의도 한두 문장: 왜 FPS를 택했고, 어떤 색깔을 담고 싶은지 핵심을 간략히 제시
   * **목표 & 컨셉**

     * 게임이 지향하는 재미 요소(예: 긴장감, 전술적 플레이, 스토리텔링 등)
     * 주요 타겟 유저(예: 하드코어 FPS 매니아, 캐주얼 게이머 등)
     * 차별화 포인트(예: 독창적인 무기 시스템, AI 적 행동, 맵 디자인 컨셉 등)

2. **게임 플레이 & 핵심 기능 (Gameplay & Core Features)**

   * **게임 모드/플레이 방식**

     * 싱글 플레이/멀티 플레이 여부
     * 캠페인 구조(스테이지별, 오픈 월드 등)
     * 주요 미션 목표(예: 기지 탈환, 보스 처치, 생존 모드 등)
   * **주요 게임플레이 특징**

     * 무기 시스템: 예를 들어 커스터마이징 가능한 무기, 탄도 물리 엔진, 리코일(반동) 체계
     * 적 AI: 적군 행동 패턴, 경로 탐색(NavMesh)·엄폐 시스템 등
     * 레벨 디자인: 맵 구조(실내·외 환경), 지형 요소(엄폐물, 고저 차), 전술적 요소 배치
     * 인터랙션 요소: 상호작용 가능한 오브젝트(문, 엘리베이터, 터렛 등), 피직스 기반 상호작용
   * **UI/UX 구성**

     * HUD(체력, 탄약, 미니맵 등) 디자인
     * 조준경(스코프) 이펙트, 무기 교체 애니메이션
     * 인벤토리·업그레이드 메뉴(있다면)

3. **기술 스택 & 엔진 활용 (Technical Stack)**

   * **엔진/프레임워크**

     * 사용한 엔진(예: Unity 2022.3 LTS, Unreal Engine 5 등)
     * 렌더링 파이프라인(예: Unity URP/HDRP, 커스텀 셰이더)
   * **프로그래밍 언어 & 라이브러리**

     * 주 언어(예: C#, C++)
     * 사용한 주요 패키지/플러그인(예: Cinemachine, ProBuilder, FMOD/WWise, NavMesh Components 등)
   * **네트워킹(멀티플레이어인 경우)**

     * 네트워크 아키텍처 선택(클라이언트-서버 모델, P2P 등)
     * 사용한 라이브러리/서비스(Photon, Mirror, UNet 등)
     * 동기화 방식(상태 동기화, 이벤트 동기화)
   * **툴 & 파이프라인**

     * 아트 에셋 제작 도구(Blender, Maya, Substance Painter 등)
     * 버전 관리(커밋 메시지 예시, Git Flow 등)
     * 빌드/배포 프로세스(지속적인 통합 CI/CD, 자동 빌드 스크립트 등)

4. **개발 과정 (Development Process)**

   * **기획 → 프로토타이핑 → 완성 단계**

     * 콘셉트 아트/스케치 단계: 아이디어 스케치, 와이어프레임
     * 프로토타입 제작: 핵심 메커니즘 테스트(예: 기본 총격 로직, 적 AI 간단 구현)
     * 피드백 & 반복 개선: 플레이 테스팅 결과, 피드백 반영 내역
   * **주요 마일스톤 & 일정 관리**

     * 예시:

       1. 1차 프로토타입 완성(2024.01.15)
       2. 핵심 시스템(무기, AI, 레벨 기본 틀) 통합(2024.02.28)
       3. 첫 플레이테스트 & 밸런싱(2024.03.15)
       4. 최종 데모 버전 제작(2024.05.01)
   * **협업 & 소통**

     * 팀원 역할 분담(프로그래머, 디자이너, 아티스트, 사운드 담당 등)
     * 사용한 협업 툴(예: Jira/Trello, Slack/Discord, Google Drive)
     * 데일리 스탠드업·위클리 리포트 등 커뮤니케이션 방식

5. **문제 해결 & 기술적 도전 (Challenges & Solutions)**

   * **성능 최적화**

     * FPS 게임이기에 중요한 프레임 레이트維持: 대규모 적 AI가 몰려올 때 드롭 프레임 최소화 기법

       * 오큘루젼 컬링/Occlusion Culling, LOD(Level of Detail) 적용
       * 배치(batch) 렌더링, 드로우 콜 최소화
     * 네트워크 최적화(멀티플레이어인 경우)

       * 패킷 압축, 업데이트 주기 조절, 예측 보정(Prediction/Interpolation)
   * **AI 행동 패턴 & 밸런싱**

     * 적 AI가 맵 전반을 탐색할 때 경로 최적화 문제: NavMesh 세분화, 비용 함수 튜닝
     * 난이도 밸런스: 무기 데미지, 재장전 속도, 적 체력 등 파라미터 조정 방식
   * **물리 & 리코일 구현**

     * 총알 궤적 및 충돌 감지: Raycast vs. Projectile vs. Hitscan 방식 비교
     * 반동(리코일) 시스템: 반동 곡선 설계, 플레이어 카메라 흔들림 처리
   * **멀티플레이어 동기화(해당 시)**

     * 클라이언트 간 동기화 지연 문제: 보간(interpolation), 예측(prediction) 알고리즘 적용
     * 서버 부하 분산: 룸/매치메이킹 방식을 통한 유저 분산 기법
   * **QA(테스트) & 디버깅**

     * 주요 버그 사례(예: 멀티샷 발사 버그, 적 AI가 벽에 갇히는 현상)
     * 디버깅 툴 활용(Profiler, 콘솔 로그, 에러 리포팅)
     * 테스트 automaton(단순 AI vs. AI 대결 시나리오, 스트레스 테스트)

6. **결과 & 성과 (Results & Achievements)**

   * **완성도 & 데모 영상/스크린샷**

     * 주요 기능이 동작하는 화면 캡처(스네이크 케이스로 파일명 구분)
     * 개발 당시 찍은 플레이 영상(간단한 움짤(gif) 또는 클릭 시 재생 가능한 링크)
   * **수치화된 결과(가능하면)**

     * 프레임 레이트(Performance benchmark): 평균 FPS, 최대/최소 FPS 비교
     * 네트워크 지연(Latency) 측정 결과(멀티플레이어인 경우)
     * 테스트 플레이어 피드백: 전투 난이도 만족도, 재방문 의향 지표 등 (예: 설문 결과)
   * **외부 평가/수상 내역(있다면)**

     * 학교 전시회, 해커톤, 공모전 참가 및 결과(입상 여부)
     * 사용자 다운로드 수(만약 스토어 배포를 했다면)

7. **배운 점 & 향후 계획 (Lessons Learned & Future Plans)**

   * **개발 과정에서 얻은 인사이트**

     * 기술적으로 성장한 부분(예: 멀티스레딩 개념 정립, 셰이더 작성 경험, AI 설계 능력)
     * 협업 과정에서 느낀 점(예: 코드 컨벤션 중요성, 의사소통 방법 개선)
     * 기획-디자인-개발-테스트 전 과정을 경험하며 터득한 노하우
   * **아쉽거나 개선하고 싶은 부분**

     * 시간 부족으로 포기한 기능(예: 커스텀 스킨, 랭킹 시스템, 더 많은 적 유형 등)
     * 완벽하게 구현되지 못한 메커니즘(예: 완전한 경로 탐색, 물리 기반 데미지 계산 세밀화 등)
   * **향후 업데이트 계획**

     * 차기 버전에서 추가하고 싶은 기능(예: 좀비 모드, 협동 모드, 사운드 이펙트 보강 등)
     * 팀 확장 계획 및 역할 분담(예: 사운드 디자이너, QA 엔지니어 충원)

8. **기술 데모 & 다운로드 링크 (Optional)**

   * **실제 빌드 파일 링크**

     * Windows/Mac/Linux 빌드 압축 파일(.zip) 다운로드 링크(구글 드라이브, Dropbox, GitHub Releases 등)
     * 실행 방법 간단 소개(예: “압축 해제 후 `Game.exe` 실행”)
   * **소스 코드 저장소**

     * GitHub/GitLab/Bitbucket 링크(오픈 소스일 경우 README.md 요약)
     * 주요 폴더 구조 & 파일 간단 설명(예: `/Assets/Scripts/PlayerController.cs`, `/Assets/Scenes/MainScene.unity` 등)

---

### 작성 팁

* **가독성**: 문단을 너무 길게 늘어뜨리지 말고, 소제목과 문단 구분을 명확히 합니다.
* **비주얼 요소**: 정적인 이미지뿐 아니라 짧은 영상을 첨부하거나, GIF로 동작을 보여주면 이해도를 높일 수 있습니다.
* **수치/데이터**: 퍼포먼스(프레임, 메모리), 테스터 설문 결과 등 명확한 지표가 있으면 신뢰도가 상승합니다.
* **목적 지향**: 포트폴리오를 보는 사람이 “이 개발자가 어떤 역량을 발휘했는지” “얼마만큼 문제를 해결했는지”를 바로 파악할 수 있도록, 각 항목별로 핵심을 강조하세요.
* **일관된 형식**: 폰트 크기, 강조(볼드·이탤릭), 코드 블록, 캡션 등을 일관되게 사용하여 전체 포트폴리오가 깔끔해 보이도록 합니다.

이 순서와 항목을 토대로, 자신이 가장 강조하고 싶은 부분(예: AI 적 행동, 네트워크 동기화, 셰이더 최적화 등)에 조금 더 분량을 투자해서 풍부하게 작성하면, 읽는 사람이 한눈에 ‘어떤 게임인가’, ‘개발자가 어떤 고민을 했는가’, ‘무엇을 배웠는가’를 명확하게 파악할 수 있습니다. AI가 생성한 포트폴리오가 아닌, 직접 겪은 경험과 고민을 바탕으로 솔직하게 풀어내는 것이 가장 큰 강점이니 참고하세요.


![ClassDiagram](/images/PhotonFPS/Photon_FPS_ClassDiagram.png)

[fps-gh]: https://github.com/To-steak/FPS
